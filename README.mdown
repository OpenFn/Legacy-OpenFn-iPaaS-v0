OpenFN Bridge
=============

Getting Started
---------------

`rbenv install 2.1.5`  
`rbenv local 2.1.5`  
`gem install bundler`  
`rbenv rehash`  
`bundle install`  
`rbenv rehash`  

**Copy the configuration defaults**  
`cp config/database.yml.example config/database.yml`  
`cp config/application.yml.template config/application.yml`  

**Setting up trust authentication for postgres**  

Ensure you have the following line somewhere at you `pg_hba.conf` file.  
```
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             all                                     trust
```
  
*The `pg_hba.conf` file is located in `/etc/postgresql/9.3/main/pg_hba.conf` on Ubuntu*

**Clone the staging database over**  
`heroku pg:pull HEROKU_POSTGRESQL_PURPLE_URL thebridge_development --app the-staging-bridge`  

Configuration
-------------

The application uses [figaro](https://github.com/laserlemon/figaro) to manage
configuration.

Using the 12-factor application pattern, anything in the `config/application.yml`
will be seeded to the environment as Rails initializes.

There is a template located in `config/application.yml.template`

To get started, copy it:

    $ cp config/application.yml.template config/application.yml

Workers
-------

The application uses [sidekiq](https://github.com/mperham/sidekiq) to perform
background tasks.

The environment variable `REDIS_URL` is required to be set for any environment
where redis is not available on `localhost`.

Sidekiq includes a UI for managing the queues, this is available at the 
`/sidekiq` URL on the given server.

The management UI requires you to be logged in as admin user.

Running Tests
-------------

This appication has spring and guard installed. So running tests should be
super easy and fast.

    # Running via rspec
    $ spring rspec

    # Running guard
    $ guard

Building Mapping Fixtures
-------------------------

There is a rake task provided for this purpose:

    $ rake db:fixtures:dump[x]
    # Where x is the ID of the mapping.

In order to load the fixtures, you will need to use namespacing.
The files are stored in `spec/fixtures/[mapping name]/[table name].yml`.
So the following method is used to load namespaced fixtures:  

```ruby
  fixtures "[mapping name]/mappings"
  set_fixture_class "[mapping name]/mappings" => Mapping
```

REST API
--------
    
GET /api/integrations

    POST /api/integrations/:integration_api_key/message


